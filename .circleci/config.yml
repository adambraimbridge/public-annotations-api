version: 2
jobs:
  build:
    docker:
      - image: golang:1
      - image: neo4j:3.4.10-enterprise
        environment:
          NEO4J_AUTH: none
          NEO4J_HEAP_MEMORY: 256
          NEO4J_CACHE_MEMORY: 256M
          NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    working_directory: /go/src/github.com/Financial-Times/public-annotations-api
    environment:
      NEO4J_TEST_URL: "http://localhost:7474/db/data/"
      CIRCLE_TEST_REPORTS: /tmp/test-reports
      CIRCLE_COVERAGE_REPORT: /tmp/coverage-results
    steps:
      - checkout
      - run:
          name: Create test folder
          command: |
            mkdir -p ${CIRCLE_TEST_REPORTS}
            mkdir -p ${CIRCLE_COVERAGE_REPORT}
      - run:
          name: External Dependencies
          command: |
            GO111MODULE=off go get github.com/jstemmer/go-junit-report
            GO111MODULE=off go get github.com/mattn/goveralls
            curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.18.0
            wget https://raw.githubusercontent.com/Financial-Times/upp-coding-standard/v1.0.0/golangci-config/.golangci.yml
      - run:
          name: Go Build
          command: go build -mod=readonly -v
      - run:
          name: Run linters
          command: |
            golangci-lint run --new-from-rev=master --build-tags=integration --config .golangci.yml
      - run:
          wget --retry-connrefused --no-check-certificate -T 60 $NEO4J_TEST_URL; curl $NEO4J_TEST_URL
      - run: |
          go test -mod=readonly -v -tags=integration -race -cover -coverprofile=$CIRCLE_COVERAGE_REPORT/coverage.out | go-junit-report > $CIRCLE_TEST_REPORTS/junit.xml
      - run: |
          goveralls -coverprofile=$CIRCLE_COVERAGE_REPORT/coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - store_test_results:
          path: /tmp/test-reports
  docker_build:
    working_directory: /public-annotations-api
    docker:
      - image: docker:18
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Dockerfile
          command: docker build .
workflows:
  version: 2
  tests_and_docker:
    jobs:
      - build
      - docker_build:
          requires:
            - build
